_space = _{" "}
_eat_ws = _{ _space* }
_eat_nl = _{ (_space | _newline) *}
_whitespace = _{ _space+ }
// todo: inline these character literals maybe? idk
_slash = _{ "/" }
_newline = _{"\n"}
_backtick = _{ "`" }
_single_quote = _{ "'" }
_double_quote = _{ "\"" }
_backslash = _{ "\\" }
_js_comment_start = _{ "//" }
_js_block_comment_start = _{ "/*" }
_js_block_comment_end = _{ "*/" }
_open_bracket = _{ "[" }
_close_bracket = _{ "]" }
_open_curly = _{ "{" }
_close_curly = _{ "}" }
_code_char = _{ ANY }
_string_char = _{ ANY }
_anything = _{ ANY }
letter = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
character_class = _{ _open_bracket ~ (_backslash ~ _anything | !_close_bracket ~ _anything)*  ~ _close_bracket }
js_string = _{ (_backtick ~ ("${" ~ javascript_inner? ~ _close_curly | _backslash ~ _anything | !_backtick ~ _anything)* ~ _backtick
        | _double_quote ~ (_backslash ~ _anything | !_double_quote ~ _anything)* ~ _double_quote
        | _single_quote ~ (_backslash ~ _anything | !_single_quote ~ _anything)* ~ _single_quote) }
_js_slash = _{ !_js_comment_start ~ !_js_block_comment_start ~ "/" ~ !"/"}
js_re = _{ _js_slash ~ (_backslash ~ _anything | character_class | !_slash ~ _anything)+ ~ "/" }

/*
no regex allowed after these tokens:
Identifier
NullLiteral
BooleanLiteral
This
CloseBracket
CloseParen
OctalIntegerLiteral
DecimalLiteral
HexIntegerLiteral
StringLiteral
PlusPlus (who cares though)
MinusMinus (same)
*/

/*
all js tokens (according to this parser)

*/
js_special_number = _{
    "0" ~ ("b" | "B" | "x" | "X" | "o" | "O") ~ ('0'..'9' | 'a'..'f' | 'A'..'F' | "_") ~ "n"?
}

js_int = _{  '0'..'9' ~ ('0'..'9' | "_")* }
js_float = _{
 (js_int ~ "." ~ js_int | "." ~ js_int | js_int )
 ~ (("e" | "E") ~ ("+" | "-")? ~ ('0'..'9' | "_")+)?
}
/// aqua
js_nodiv_symbol = _{ !( "--" | "++") ~ // slash can't follow any of these tokens as a division operator
    ("!" |
    "%" |
    "&" |
    "*" |
    "+" |
    "," |
    "-" |
    "." |
    ":" |
    "<" ~ !"/" |
    "=" |
    ">" |
    "?" |
    "^" |
    "|" |
    "~" |
    ";" |
    "@")

}
js_div = _{
    _js_slash
}
js_type_annotation = _{
"<" ~ (js_identifier_continue | "[" | "]" | js_whitespace_element | "*")* ~ ">"
}
/// blue
js_nodiv_keyword = _{ // slash can't follow any of these tokens as a division operator
    ("await" |
    "case" |
    "default" |
    "delete" |
    "export" |
    "extends" |
    "in" |
    "instanceof" |
    "new" |
    "return" |
    "throw" |
    "typeof" |
    "yield" |
    "as" |
    "async" |
    "break" |
    "catch" |
    "class" |
    "const" |
    "continue" |
    "debugger" |
    "do" |
    "else" |
    "enum" |
    "finally" |
    "for" |
    "from" |
    "function" |
    "if" |
    "implements" |
    "import" |
    "interface" |
    "let" |
    "package" |
    "private" |
    "protected" |
    "public" |
    "static" |
    "switch" |
    "try" |
    "var" |
    "void" |
    "while" |
    "with") ~ !js_identifier_continue

}
/// pink
js_noreafter_noid = _{ js_string | js_special_number | js_float | "true" | "false" | "[" ~ javascript_inner? ~ "]" | "(" ~ javascript_inner? ~ ")"  | "--" | "++"}
/// #ffaa33
js_noreafter = _{  js_identifier ~ js_type_annotation? | js_noreafter_noid }

js_identifier_start = _{ letter | "$" | "_" }
js_identifier_continue = _{ js_identifier_start | digit }
js_identifier = _{ js_identifier_start ~ (js_identifier_continue)* } // !_open_curly ~ !_close_curly ~ !_js_block_comment_start ~ !_js_comment_start ~ _anything
/// yellow
js_block_comment = _{ _js_block_comment_start ~ (!_js_block_comment_end ~ _anything)* ~ _js_block_comment_end }
/// #ffff88
js_comment = _{ _js_comment_start ~ (!_newline ~ _anything)* ~ _newline }
/// #88aa88
jsx_text = _{ !"<" ~ _anything }
jsx_element = _{
    "{" ~ javascript_inner ~ "}"
    | jsx_text
    | jsx
}
/// green
jsx_identifier = _{ js_identifier_start ~ (js_identifier_continue | "." | "-")* }
jsx_close_tag = _{ "</" ~ jsx_identifier ~ ">" | "</>" }
jsx_tag_prefix = _{ "<" ~ jsx_identifier ~ (js_whitespace_element* ~ (jsx_identifier ~ "=")? ~ (js_string | "{" ~ javascript_inner ~ "}"))* ~ js_whitespace_element* }
/// green
jsx_open_tag = _{ "<>" | jsx_tag_prefix ~ ">"}
/// green
jsx_selfclose_tag = _{ jsx_tag_prefix ~ "/>"}
jsx = _{

   jsx_open_tag
        ~ jsx_element*
        ~ jsx_close_tag
    | jsx_selfclose_tag
}
js_whitespace_element = _{ (_newline | _space)+ | js_comment | js_block_comment}
js_element = _{ (_open_curly ~ javascript_inner? ~ _close_curly
                | js_whitespace_element
                | !_js_comment_start ~ !_js_block_comment_start ~ (
                    jsx
                    | js_nodiv_keyword
                    | js_nodiv_symbol
                    | js_noreafter ~ (_eat_nl ~ js_div ~ !(_eat_nl ~ js_div))?
                    | js_re
                )
            ) }
shebang = _{ "#!" ~ (!_newline ~ _anything)* ~ _newline}
javascript_inner = _{ js_element+ }

javascript = { _eat_nl ~ shebang? ~  javascript_inner? }
js_block = { "@js" ~ _eat_ws ~ _block_start ~ javascript ~ _block_end}
_python_comment_start = _{ "#" }
_python_comment = _{ _python_comment_start ~ (!_newline ~ _code_char)* ~ _newline }
_python_string_start = _{_double_quote | _single_quote}
_python_triple_string = _{
    PUSH(_python_string_start) ~ PEEK ~ PEEK
    ~ (_backslash{2} | _backslash ~ PEEK | !(PEEK{3}) ~  _code_char)*
    ~ PEEK ~ PEEK ~ POP
}
_python_string = _{
    PUSH(_python_string_start)
    ~ (_backslash{2} | _backslash ~ PEEK | !(PEEK) ~  _code_char)*
    ~ POP
}
_python_bracketed = _{
    _block_start ~ python ~ _block_end
}
python_token = _{
    _python_comment
    | _python_triple_string
    | _python_string
    | _python_bracketed
    | (!_block_start ~ !_block_end ~ !_python_comment_start ~ !_python_string_start ~ _code_char)+
}
python = {
    python_token*
}
python_block = { "@py" ~ _eat_ws ~ _block_start ~ python ~ _block_end }
_block_start = _{ "{" }
_block_end = _{ "}" }
pipe = { "|" }
word_separator = _{ pipe | _newline | _space | _block_start  }
/// orange
double_string_body = { (_backslash ~ _double_quote | !_double_quote ~ _string_char )* }
double_string = { _double_quote ~ double_string_body ~ _double_quote ~ &word_separator }
/// pink
single_string_body = { (!_single_quote ~ _string_char)* }
single_string = { _single_quote ~ single_string_body ~ _single_quote ~ &word_separator }
_string_start = _{_single_quote | _double_quote}
_language_header_start = _{ "@" }
/// #ff00ff
language_header = { _language_header_start ~ (!word_separator ~ _code_char)+ }
/// violet
language_block = {
    &language_header
    ~ (python_block | js_block)
}
_comment_start = _{ "#" }

/// yellow
plain_word = { !_language_header_start ~ !_comment_start ~ (!word_separator ~ !_string_start ~ !_comment_start ~ _code_char)+ }
token = { double_string
                        | single_string
                        | language_block
                        | plain_word }

command = { token ~ (_whitespace ~ token)* }

EOL = _{ _newline | EOI }



// todo: this makes it a syntax error to not have a space before a comment. probably good for ambiguity!
// will it be too annoying, though?
/// blue
comment = {_comment_start ~ (!EOL ~ _code_char)*}


_ews_eoi = _{_eat_ws ~ EOI}
_ws_comment = _{ _whitespace ~ comment }
_ews_newline = _{_eat_ws ~ _newline}

ews_pipeline = {
    (_eat_ws ~ command)
    ~ (
        (_ws_comment? ~ _ews_newline)?
        ~ _eat_ws ~ pipe
        ~ (_ws_comment? ~ _ews_newline)?
        ~ _eat_ws ~ command
    )*
}

milkshell = { ((ews_pipeline? ~ _ws_comment?) ~ _ews_newline)* ~ (ews_pipeline? ~ _ws_comment?) ~ _ews_eoi}
